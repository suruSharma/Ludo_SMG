
    if (!stateBeforeMove) { // stateBeforeMove is null in a new match.
      stateBeforeMove = getInitialState();
    }
    let board: Board = stateBeforeMove.board;
    let boardDelta : BoardDelta = stateBeforeMove.delta;
    if(!previousClick){
        //previousClick is empty implies that the user has/should have clicked a pawn.
        log.info("Previous click is null");
        log.info("("+row+","+col+")");
            
        if(validClick){
            log.info("You clicked the right cell");
        }else{
            log.info("Sorry! Wrong cell");
        }
        previousClick = null;
        return null;
    }else{
      if (board[row][col] !== '') {
      throw new Error("One can only make a move in an empty position!");
    }
    if (getWinner(boardDelta) !== '' || isTie(board)) {
      throw new Error("Can only make a move if the game is not over!");
    }
    let boardAfterMove = angular.copy(board);
    boardAfterMove[row][col] = turnIndexBeforeMove === 0 ? 'X' : 'O';
    //TODO : create board delta after move and pass it to the getWinner method
    let winner = getWinner(boardDelta);//to be changed. 
    let endMatchScores: number[];
    let turnIndexAfterMove: number;
    if (winner !== '' || isTie(boardAfterMove)) {
      // Game over.
      turnIndexAfterMove = -1;
      endMatchScores = winner === 'X' ? [1, 0] : winner === 'O' ? [0, 1] : [0, 0];
    } else {
      // Game continues. Now it's the opponent's turn (the turn switches from 0 to 1 and 1 to 0).
      turnIndexAfterMove = getNextPlayer(turnIndexBeforeMove);
      endMatchScores = null;
    }
    let delta: BoardDelta = {players : []};//TODO : create/add players array
    let stateAfterMove: IState = {delta: delta, board: boardAfterMove};
    return {endMatchScores: endMatchScores, turnIndexAfterMove: turnIndexAfterMove, stateAfterMove: stateAfterMove};  
    }